<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.weimhc.modules.job.dao.LearningLiveDao">
    
	<sql id="learningLiveColumns">
		a.id AS "id",
		a.resume_id AS "resumeId",
		a.member_id AS "memberId",
		a.city_id AS "city.id",
		sa.name AS "city.name",
		a.project_name AS "projectName",
		a.assume_office AS "assumeOffice",
		a.begin_date AS "beginDate",
		a.end_date AS "endDate",
		a.description AS "description",
		a.create_date AS "createDate",
		a.update_date AS "updateDate",
		a.remarks AS "remarks",
		a.del_flag AS "delFlag"
	</sql>
	
	<sql id="learningLiveJoins">
		LEFT JOIN sys_area sa ON sa.id = a.city_id
	</sql>
    
	<select id="get" resultType="LearningLive">
		SELECT 
			<include refid="learningLiveColumns"/>
		FROM learning_live a
		<include refid="learningLiveJoins"/>
		WHERE a.id = #{id}
	</select>

	<select id="getByResumeId" resultType="LearningLive" parameterType="java.lang.String">
		SELECT
			<include refid="learningLiveColumns"/>
		FROM learning_live a
		<include refid="learningLiveJoins"/>
		WHERE a.resume_id = #{resumeId}
	</select>
	
	<select id="getEntity" resultType="LearningLive">
		SELECT 
			<include refid="learningLiveColumns"/>
		FROM learning_live a
		<include refid="learningLiveJoins"/>
        <where>
			and a.id = #{id}
		</where>		
	</select>	
	
	<select id="findList" resultType="LearningLive">
		SELECT 
			<include refid="learningLiveColumns"/>
		FROM learning_live a
		<include refid="learningLiveJoins"/>
		<where>
			a.del_flag = #{DEL_FLAG_NORMAL}
			<if test="resumeId != null and resumeId != ''">
				AND a.resume_id = #{resumeId}
			</if>
		</where>
		<choose>
			<when test="page !=null and page.pageable.orderBy != null and page.pageable.orderBy != ''">
				ORDER BY ${page.pageable.orderBy}
			</when>
			<otherwise>
				ORDER BY a.update_date DESC
			</otherwise>
		</choose>
	</select>
	
	<select id="findAllList" resultType="LearningLive">
		SELECT 
			<include refid="learningLiveColumns"/>
		FROM learning_live a
		<include refid="learningLiveJoins"/>
		<where>
			a.del_flag = #{DEL_FLAG_NORMAL}
			<if test="resumeId != null and resumeId != ''">
				AND a.resume_id = #{resumeId}
			</if>
		</where>		
		ORDER BY a.update_date DESC
	</select>
	
	<select id="exists" resultType="boolean">
		SELECT 	count(a.id) 
		FROM learning_live a
		<where>
			a.del_flag = #{DEL_FLAG_NORMAL}
			AND a.id = #{id}
		</where>				
	</select>
	
	<select id="count" resultType="long">
		SELECT 	count(a.id) 	 
		FROM learning_live a
		<where>
			a.del_flag = #{DEL_FLAG_NORMAL}
			AND a.id = #{id}
		</where>				
	</select>
	
	<insert id="insert">
		INSERT INTO learning_live(
			id,
			resume_id,
			member_id,
			city_id,
			project_name,
			assume_office,
			begin_date,
			end_date,
			description,
			create_date,
			update_date,
			remarks,
			del_flag
		) VALUES (
			#{id},
			#{resumeId},
			#{memberId},
			#{city.id},
			#{projectName},
			#{assumeOffice},
			#{beginDate},
			#{endDate},
			#{description},
			#{createDate},
			#{updateDate},
			#{remarks},
			#{delFlag}
		)
	</insert>
	
	<insert id="insertOrUpdate" >
		<!-- 查看是否存,如果存在及更新，否则插入 -->
	    <selectKey keyProperty="sqlMap.count" order="BEFORE" resultType="int">  
	        select count(id) as num from learning_live where id = #{id}
	    </selectKey>  
	    <if test="sqlMap.count > 0">  
			UPDATE learning_live SET 	
								resume_id = #{resumeId},
				member_id = #{memberId},
				city_id = #{city.id},
				project_name = #{projectName},
				assume_office = #{assumeOffice},
				begin_date = #{beginDate},
				end_date = #{endDate},
				description = #{description},
				update_date = #{updateDate},
				remarks = #{remarks}
			WHERE id = #{id}
   		 </if> 
   		 <if test="sqlMap.count == 0">  
			INSERT INTO learning_live(
											id,
						resume_id,
						member_id,
						city_id,
						project_name,
						assume_office,
						begin_date,
						end_date,
						description,
						create_date,
						update_date,
						remarks,
						del_flag
					) VALUES (
											#{id},
						#{resumeId},
						#{memberId},
						#{city.id},
						#{projectName},
						#{assumeOffice},
						#{beginDate},
						#{endDate},
						#{description},
						#{createDate},
						#{updateDate},
						#{remarks},
						#{delFlag}
					)
		</if> 
	</insert>
	
	<update id="update">
		UPDATE learning_live SET 	
			resume_id = #{resumeId},
			member_id = #{memberId},
			city_id = #{city.id},
			project_name = #{projectName},
			assume_office = #{assumeOffice},
			begin_date = #{beginDate},
			end_date = #{endDate},
			description = #{description},
			update_date = #{updateDate},
			remarks = #{remarks}
		WHERE id = #{id}
	</update>
	
	<update id="delete">

		DELETE FROM learning_live
	
	    WHERE id = #{id}
	</update>
	
	<update id="deleteBatch">
		DELETE FROM learning_live
		WHERE
			id in
			<foreach collection="array" item="item" open="(" separator="," close=")">
			 #{item} 
			</foreach>
	</update>
	
	<update id="deleteEntity">
		UPDATE learning_live SET 
			del_flag = #{DEL_FLAG_DELETE}
	    WHERE id = #{id}
	</update>
	
	<update id="deleteBatchEntity">
		UPDATE learning_live SET 
			del_flag = '1'
		where
		    id in
			<foreach collection="array" item="item" open="(" separator="," close=")">
			 #{item} 
			</foreach>
	</update>
	
</mapper>